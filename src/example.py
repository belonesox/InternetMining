#-*- coding: utf-8 -*-
#Конечно же импортируем библиотечку. Под каждым линуксом по своему. 
#apt-get install python-igraph под ubuntu пишет что помогает. Под винду советую зайти на офф.сайт.
import igraph
import time
start = time.time()
#здесь создаётся неориентированный граф на 18000 вершин. Они нумеруются с нуля.
g = igraph.Graph(18000)
finish = time.time()
print "Создание графа с 18000 вершинами за ",(finish - start)
start = time.time()
#Заполняем граф вершинами. Для этого вызываем функцию add_edges. 
#Она принимает кортеж из начальной и конечной вершины. 
#Если надо добавить сразу несколько, кортежи объединяются в список. Как мы увидим дальше, это сильно оптимизирует программу.
#В графе существует специальный массив es для аттрибутов рёбер(и vs для аттрибутов вершин). В цикле также каждому ребру устанавливается.
i = 0 
while i < 10000:
    g.add_edges((i+1,i))
    g.es[i]["weight"] = i%5
    i+=1
finish = time.time()
print "Заполнение графа 10000 рёбрами за ", (finish - start)
#Для добавления 10 вершин выполняем следующую комманду.
g.add_vertices(10)
#Для определения соединены ли две вершины выполняем след. комманду
if g.are_connected(0, 1):
    print "Вершины 0 и 1 соединены"
    #Для получения id ребра соединённых вершин
    print "id ребра их соединяющего ",g.get_eid(0,1)
#для удаления вершин, если несколько то передаём их список. Также удаляются все рёбра с ними связанные
g.delete_vertices([0,1])
#тоже самое, только для рёбер, но вершины не удаляются
g.delete_edges(5)
start = time.time()
g.write_graphml("gpaph.graphml")
finish = time.time()
print "Сохранение графа за ",(finish - start)
# для загрузки графа используется load
start = time.time()
m=igraph.load("gpaph.graphml")
finish = time.time()
print "Загрузка графа за ",(finish - start)